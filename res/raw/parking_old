/**
 * 
 */
package com.milang.helloworld;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

import android.content.Context;
import android.content.res.Resources;
import android.content.res.XmlResourceParser;
import android.location.Location;
import android.provider.Settings;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;

import com.google.android.maps.GeoPoint;
import com.milang.location.LocationUtil;
import com.milang.location.LocationFinder.LocationResult;

/**
 * @author milang
 *
 */
public class MyLocationResult{
	
/*
	    ArrayList<GeoPoint> arraylist_geopoint = new ArrayList<GeoPoint>();
	    
	    String androidId ="";
	    
		ArrayList<String> arraylist_address = new ArrayList<String>();
		
		ArrayList<SearchResults> array_search_results = new ArrayList<SearchResults>();
		
		public static final int NUM_RESULTS_SHOWN = 10;
	    	
	    	//Settings.Secure.getString(Parking.this.getContentResolver(),
	    		//android.provider.Settings.Secure.ANDROID_ID); 
		
		@Override
		public void gotLocation(Location location) {
			
			GeoPoint found_geo_point;
			
			// if run on emulator, simulate point
			if (androidId == null) {  found_geo_point = LocationUtil.getGeoPointFromStrings("43.80503", "-79.31040");}
			
			else {	found_geo_point = LocationUtil.getGeoPointFromLocation(location);}
				
			FillData(found_geo_point);
		}

		private void FillData(GeoPoint myCurrentLocation) {
			try {
				// Get all GeoPoints from xml
				fillGeoPointsFromXml(myCurrentLocation);
				
		        Collections.sort(array_search_results, new Comparator<Object>(){
		      	   
		            public int compare(Object o1, Object o2) {
		         	   SearchResults p1 = (SearchResults) o1;
		         	   SearchResults p2 = (SearchResults) o2;
		         	   
		         	   return p1.getCalcDistance().compareTo(p2.getCalcDistance());
		            }
		        });
		        
		        ArrayList<SearchResults> top_num_of_results = new ArrayList<SearchResults>();
		        
		        // Show top 10 results
		        for (int i=0; i < NUM_RESULTS_SHOWN; i++) {
		        	
		        	top_num_of_results.add(array_search_results.get(i));
		        }
		    }
			
			catch (IOException e) {
				e.printStackTrace();
			} 
			
			catch (XmlPullParserException e) {
				e.printStackTrace();
			}
		}

		private void fillGeoPointsFromXml(GeoPoint myCurrentLocation, Context context) throws IOException, XmlPullParserException {
			
			 Resources res = Parking.class..getResources();
			 XmlResourceParser parser = res.getXml(R.xml.parkinglocations);
			 
			 while (parser.next() != XmlPullParser.END_DOCUMENT)
			 {
				 String tagName = parser.getName();
				 String address = null;
				 String latitude = null;
				 String longitude = null;
				 
				 if ((tagName!=null) && tagName.equals("parkinglocation")) {
					 int size = parser.getAttributeCount();
					 for (int i=0; i < size; i++) {
						 String attrName = parser.getAttributeName(i);
						 String attrValue = parser.getAttributeValue(i);
						 					 
						 if ((attrName != null) && attrName.equals("latitude")) {
							 latitude = attrValue;	
						 }
						 
						 else if ((attrName != null) && attrName.equals("longitude")) {
							 longitude = attrValue;
						 }
						 
						 else if ((attrName !=null) && attrName.equals("address")){
							 address = attrValue;
						 }
						 
						 else {
							 latitude = null;
							 longitude = null;
						 }
						 
						 if ((latitude!=null)&& (longitude!=null)) {
							 GeoPoint myGeoPoint = LocationUtil.getGeoPointFromStrings(latitude, longitude);
							 arraylist_geopoint.add(myGeoPoint);
							 arraylist_address.add(address);
							 
							 addToSearchResults(myGeoPoint, myCurrentLocation, address);
						 }
					 }
				 }
			 }
		}
		
		private void addToSearchResults(GeoPoint gp, GeoPoint gp2, String address){
		
			// calculates distance between two geo-points
			Double calcDistance = LocationUtil.calcDistanceInKm(gp, gp2);
			 
			// add the calculated distance and 
			SearchResults sr1 = new SearchResults();
		    sr1.setAddress(address);
		    sr1.setCalcDistance(calcDistance);
		    array_search_results.add(sr1);
		}
		
		*/
	}
